
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterH.js
 */
#pragma once

#include <react/renderer/components/view/ViewEventEmitter.h>


namespace facebook::react {
class RNMBXAtmosphereEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXBackgroundLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXCalloutEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXCameraEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnUserTrackingModeChangePayloadRenamed {
      bool followUserLocation;
    std::string followUserMode;
    };

  struct OnUserTrackingModeChange {
      std::string type;
    OnUserTrackingModeChangePayloadRenamed payloadRenamed;
    };
  void onUserTrackingModeChange(OnUserTrackingModeChange value) const;
};
class RNMBXCircleLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXCustomLocationProviderEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXFillExtrusionLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXFillLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXHeatmapLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXImageEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXImagesEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnImageMissingPayload {
      std::string imageKey;
    };

  struct OnImageMissing {
      std::string type;
    OnImageMissingPayload payload;
    };
  void onImageMissing(OnImageMissing value) const;
};
class RNMBXImageSourceEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXLightEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXLineLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXMapViewEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnPress {
      std::string type;
    std::string payload;
    };

  struct OnLongPress {
      std::string type;
    std::string payload;
    };

  struct OnMapChange {
      std::string type;
    std::string payload;
    };

  struct OnCameraChanged {
      std::string type;
    std::string payload;
    };
  void onPress(OnPress value) const;

  void onLongPress(OnLongPress value) const;

  void onMapChange(OnMapChange value) const;

  void onCameraChanged(OnCameraChanged value) const;
};
class RNMBXMarkerViewContentEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXMarkerViewEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXModelLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXModelsEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXNativeUserLocationEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXPointAnnotationEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnMapboxPointAnnotationDeselected {
      std::string type;
    std::string payload;
    };

  struct OnMapboxPointAnnotationDrag {
      std::string type;
    std::string payload;
    };

  struct OnMapboxPointAnnotationDragEnd {
      std::string type;
    std::string payload;
    };

  struct OnMapboxPointAnnotationDragStart {
      std::string type;
    std::string payload;
    };

  struct OnMapboxPointAnnotationSelected {
      std::string type;
    std::string payload;
    };
  void onMapboxPointAnnotationDeselected(OnMapboxPointAnnotationDeselected value) const;

  void onMapboxPointAnnotationDrag(OnMapboxPointAnnotationDrag value) const;

  void onMapboxPointAnnotationDragEnd(OnMapboxPointAnnotationDragEnd value) const;

  void onMapboxPointAnnotationDragStart(OnMapboxPointAnnotationDragStart value) const;

  void onMapboxPointAnnotationSelected(OnMapboxPointAnnotationSelected value) const;
};
class RNMBXRasterDemSourceEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXRasterLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXRasterSourceEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXShapeSourceEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnMapboxShapeSourcePress {
      std::string type;
    std::string payload;
    };
  void onMapboxShapeSourcePress(OnMapboxShapeSourcePress value) const;
};
class RNMBXSkyLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXStyleImportEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXSymbolLayerEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXTerrainEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  
  
};
class RNMBXVectorSourceEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnMapboxVectorSourcePress {
      std::string type;
    std::string payload;
    };
  void onMapboxVectorSourcePress(OnMapboxVectorSourcePress value) const;
};
class RNMBXViewportEventEmitter : public ViewEventEmitter {
 public:
  using ViewEventEmitter::ViewEventEmitter;

  struct OnStatusChanged {
      std::string type;
    std::string payload;
    };
  void onStatusChanged(OnStatusChanged value) const;
};
} // namespace facebook::react
