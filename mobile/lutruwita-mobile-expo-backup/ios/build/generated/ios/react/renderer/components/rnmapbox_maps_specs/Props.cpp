
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/rnmapbox_maps_specs/Props.h>
#include <folly/dynamic.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

RNMBXAtmosphereProps::RNMBXAtmosphereProps(
    const PropsParserContext &context,
    const RNMBXAtmosphereProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXBackgroundLayerProps::RNMBXBackgroundLayerProps(
    const PropsParserContext &context,
    const RNMBXBackgroundLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {}))
      {}
RNMBXCalloutProps::RNMBXCalloutProps(
    const PropsParserContext &context,
    const RNMBXCalloutProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

    
      {}
RNMBXCameraProps::RNMBXCameraProps(
    const PropsParserContext &context,
    const RNMBXCameraProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    maxBounds(convertRawProp(context, rawProps, "maxBounds", sourceProps.maxBounds, {})),
    animationDuration(convertRawProp(context, rawProps, "animationDuration", sourceProps.animationDuration, {})),
    animationMode(convertRawProp(context, rawProps, "animationMode", sourceProps.animationMode, {})),
    defaultStop(convertRawProp(context, rawProps, "defaultStop", sourceProps.defaultStop, {})),
    userTrackingMode(convertRawProp(context, rawProps, "userTrackingMode", sourceProps.userTrackingMode, {})),
    followUserLocation(convertRawProp(context, rawProps, "followUserLocation", sourceProps.followUserLocation, {})),
    followUserMode(convertRawProp(context, rawProps, "followUserMode", sourceProps.followUserMode, {})),
    followZoomLevel(convertRawProp(context, rawProps, "followZoomLevel", sourceProps.followZoomLevel, {})),
    followPitch(convertRawProp(context, rawProps, "followPitch", sourceProps.followPitch, {})),
    followHeading(convertRawProp(context, rawProps, "followHeading", sourceProps.followHeading, {})),
    followPadding(convertRawProp(context, rawProps, "followPadding", sourceProps.followPadding, {})),
    zoomLevel(convertRawProp(context, rawProps, "zoomLevel", sourceProps.zoomLevel, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    stop(convertRawProp(context, rawProps, "stop", sourceProps.stop, {}))
      {}
RNMBXCircleLayerProps::RNMBXCircleLayerProps(
    const PropsParserContext &context,
    const RNMBXCircleLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXCustomLocationProviderProps::RNMBXCustomLocationProviderProps(
    const PropsParserContext &context,
    const RNMBXCustomLocationProviderProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    coordinate(convertRawProp(context, rawProps, "coordinate", sourceProps.coordinate, {})),
    heading(convertRawProp(context, rawProps, "heading", sourceProps.heading, {}))
      {}
RNMBXFillExtrusionLayerProps::RNMBXFillExtrusionLayerProps(
    const PropsParserContext &context,
    const RNMBXFillExtrusionLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {}))
      {}
RNMBXFillLayerProps::RNMBXFillLayerProps(
    const PropsParserContext &context,
    const RNMBXFillLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXHeatmapLayerProps::RNMBXHeatmapLayerProps(
    const PropsParserContext &context,
    const RNMBXHeatmapLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXImageProps::RNMBXImageProps(
    const PropsParserContext &context,
    const RNMBXImageProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    stretchX(convertRawProp(context, rawProps, "stretchX", sourceProps.stretchX, {})),
    stretchY(convertRawProp(context, rawProps, "stretchY", sourceProps.stretchY, {})),
    content(convertRawProp(context, rawProps, "content", sourceProps.content, {})),
    sdf(convertRawProp(context, rawProps, "sdf", sourceProps.sdf, {})),
    name(convertRawProp(context, rawProps, "name", sourceProps.name, {})),
    scale(convertRawProp(context, rawProps, "scale", sourceProps.scale, {}))
      {}
RNMBXImagesProps::RNMBXImagesProps(
    const PropsParserContext &context,
    const RNMBXImagesProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    images(convertRawProp(context, rawProps, "images", sourceProps.images, {})),
    nativeImages(convertRawProp(context, rawProps, "nativeImages", sourceProps.nativeImages, {})),
    hasOnImageMissing(convertRawProp(context, rawProps, "hasOnImageMissing", sourceProps.hasOnImageMissing, {}))
      {}
RNMBXImageSourceProps::RNMBXImageSourceProps(
    const PropsParserContext &context,
    const RNMBXImageSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    coordinates(convertRawProp(context, rawProps, "coordinates", sourceProps.coordinates, {}))
      {}
RNMBXLightProps::RNMBXLightProps(
    const PropsParserContext &context,
    const RNMBXLightProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXLineLayerProps::RNMBXLineLayerProps(
    const PropsParserContext &context,
    const RNMBXLineLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXMapViewProps::RNMBXMapViewProps(
    const PropsParserContext &context,
    const RNMBXMapViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    attributionEnabled(convertRawProp(context, rawProps, "attributionEnabled", sourceProps.attributionEnabled, {})),
    attributionPosition(convertRawProp(context, rawProps, "attributionPosition", sourceProps.attributionPosition, {})),
    logoEnabled(convertRawProp(context, rawProps, "logoEnabled", sourceProps.logoEnabled, {})),
    logoPosition(convertRawProp(context, rawProps, "logoPosition", sourceProps.logoPosition, {})),
    compassEnabled(convertRawProp(context, rawProps, "compassEnabled", sourceProps.compassEnabled, {})),
    compassFadeWhenNorth(convertRawProp(context, rawProps, "compassFadeWhenNorth", sourceProps.compassFadeWhenNorth, {})),
    compassPosition(convertRawProp(context, rawProps, "compassPosition", sourceProps.compassPosition, {})),
    compassViewPosition(convertRawProp(context, rawProps, "compassViewPosition", sourceProps.compassViewPosition, {})),
    compassViewMargins(convertRawProp(context, rawProps, "compassViewMargins", sourceProps.compassViewMargins, {})),
    scaleBarEnabled(convertRawProp(context, rawProps, "scaleBarEnabled", sourceProps.scaleBarEnabled, {})),
    scaleBarPosition(convertRawProp(context, rawProps, "scaleBarPosition", sourceProps.scaleBarPosition, {})),
    zoomEnabled(convertRawProp(context, rawProps, "zoomEnabled", sourceProps.zoomEnabled, {})),
    scrollEnabled(convertRawProp(context, rawProps, "scrollEnabled", sourceProps.scrollEnabled, {})),
    rotateEnabled(convertRawProp(context, rawProps, "rotateEnabled", sourceProps.rotateEnabled, {})),
    pitchEnabled(convertRawProp(context, rawProps, "pitchEnabled", sourceProps.pitchEnabled, {})),
    deselectAnnotationOnTap(convertRawProp(context, rawProps, "deselectAnnotationOnTap", sourceProps.deselectAnnotationOnTap, {})),
    requestDisallowInterceptTouchEvent(convertRawProp(context, rawProps, "requestDisallowInterceptTouchEvent", sourceProps.requestDisallowInterceptTouchEvent, {})),
    projection(convertRawProp(context, rawProps, "projection", sourceProps.projection, {})),
    localizeLabels(convertRawProp(context, rawProps, "localizeLabels", sourceProps.localizeLabels, {})),
    styleURL(convertRawProp(context, rawProps, "styleURL", sourceProps.styleURL, {})),
    gestureSettings(convertRawProp(context, rawProps, "gestureSettings", sourceProps.gestureSettings, {})),
    surfaceView(convertRawProp(context, rawProps, "surfaceView", sourceProps.surfaceView, {})),
    scaleBarViewMargins(convertRawProp(context, rawProps, "scaleBarViewMargins", sourceProps.scaleBarViewMargins, {})),
    attributionViewMargins(convertRawProp(context, rawProps, "attributionViewMargins", sourceProps.attributionViewMargins, {})),
    attributionViewPosition(convertRawProp(context, rawProps, "attributionViewPosition", sourceProps.attributionViewPosition, {})),
    compassImage(convertRawProp(context, rawProps, "compassImage", sourceProps.compassImage, {})),
    mapViewImpl(convertRawProp(context, rawProps, "mapViewImpl", sourceProps.mapViewImpl, {})),
    preferredFramesPerSecond(convertRawProp(context, rawProps, "preferredFramesPerSecond", sourceProps.preferredFramesPerSecond, {}))
      {}
RNMBXMarkerViewContentProps::RNMBXMarkerViewContentProps(
    const PropsParserContext &context,
    const RNMBXMarkerViewContentProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

    
      {}
RNMBXMarkerViewProps::RNMBXMarkerViewProps(
    const PropsParserContext &context,
    const RNMBXMarkerViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    coordinate(convertRawProp(context, rawProps, "coordinate", sourceProps.coordinate, {})),
    anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {})),
    allowOverlap(convertRawProp(context, rawProps, "allowOverlap", sourceProps.allowOverlap, {})),
    allowOverlapWithPuck(convertRawProp(context, rawProps, "allowOverlapWithPuck", sourceProps.allowOverlapWithPuck, {})),
    isSelected(convertRawProp(context, rawProps, "isSelected", sourceProps.isSelected, {}))
      {}
RNMBXModelLayerProps::RNMBXModelLayerProps(
    const PropsParserContext &context,
    const RNMBXModelLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXModelsProps::RNMBXModelsProps(
    const PropsParserContext &context,
    const RNMBXModelsProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    models(convertRawProp(context, rawProps, "models", sourceProps.models, {}))
      {}
RNMBXNativeUserLocationProps::RNMBXNativeUserLocationProps(
    const PropsParserContext &context,
    const RNMBXNativeUserLocationProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    androidRenderMode(convertRawProp(context, rawProps, "androidRenderMode", sourceProps.androidRenderMode, {})),
    puckBearing(convertRawProp(context, rawProps, "puckBearing", sourceProps.puckBearing, {})),
    puckBearingEnabled(convertRawProp(context, rawProps, "puckBearingEnabled", sourceProps.puckBearingEnabled, {})),
    bearingImage(convertRawProp(context, rawProps, "bearingImage", sourceProps.bearingImage, {})),
    shadowImage(convertRawProp(context, rawProps, "shadowImage", sourceProps.shadowImage, {})),
    topImage(convertRawProp(context, rawProps, "topImage", sourceProps.topImage, {})),
    scale(convertRawProp(context, rawProps, "scale", sourceProps.scale, {})),
    visible(convertRawProp(context, rawProps, "visible", sourceProps.visible, {false})),
    pulsing(convertRawProp(context, rawProps, "pulsing", sourceProps.pulsing, {}))
      {}
RNMBXPointAnnotationProps::RNMBXPointAnnotationProps(
    const PropsParserContext &context,
    const RNMBXPointAnnotationProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    coordinate(convertRawProp(context, rawProps, "coordinate", sourceProps.coordinate, {})),
    draggable(convertRawProp(context, rawProps, "draggable", sourceProps.draggable, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {}))
      {}
RNMBXRasterDemSourceProps::RNMBXRasterDemSourceProps(
    const PropsParserContext &context,
    const RNMBXRasterDemSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    tileUrlTemplates(convertRawProp(context, rawProps, "tileUrlTemplates", sourceProps.tileUrlTemplates, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    tileSize(convertRawProp(context, rawProps, "tileSize", sourceProps.tileSize, {}))
      {}
RNMBXRasterLayerProps::RNMBXRasterLayerProps(
    const PropsParserContext &context,
    const RNMBXRasterLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXRasterSourceProps::RNMBXRasterSourceProps(
    const PropsParserContext &context,
    const RNMBXRasterSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    tileUrlTemplates(convertRawProp(context, rawProps, "tileUrlTemplates", sourceProps.tileUrlTemplates, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    tileSize(convertRawProp(context, rawProps, "tileSize", sourceProps.tileSize, {})),
    tms(convertRawProp(context, rawProps, "tms", sourceProps.tms, {})),
    attribution(convertRawProp(context, rawProps, "attribution", sourceProps.attribution, {})),
    sourceBounds(convertRawProp(context, rawProps, "sourceBounds", sourceProps.sourceBounds, {}))
      {}
RNMBXShapeSourceProps::RNMBXShapeSourceProps(
    const PropsParserContext &context,
    const RNMBXShapeSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    shape(convertRawProp(context, rawProps, "shape", sourceProps.shape, {})),
    cluster(convertRawProp(context, rawProps, "cluster", sourceProps.cluster, {})),
    clusterRadius(convertRawProp(context, rawProps, "clusterRadius", sourceProps.clusterRadius, {})),
    clusterMaxZoomLevel(convertRawProp(context, rawProps, "clusterMaxZoomLevel", sourceProps.clusterMaxZoomLevel, {})),
    clusterProperties(convertRawProp(context, rawProps, "clusterProperties", sourceProps.clusterProperties, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    buffer(convertRawProp(context, rawProps, "buffer", sourceProps.buffer, {})),
    tolerance(convertRawProp(context, rawProps, "tolerance", sourceProps.tolerance, {})),
    lineMetrics(convertRawProp(context, rawProps, "lineMetrics", sourceProps.lineMetrics, {})),
    hasPressListener(convertRawProp(context, rawProps, "hasPressListener", sourceProps.hasPressListener, {})),
    hitbox(convertRawProp(context, rawProps, "hitbox", sourceProps.hitbox, {}))
      {}
RNMBXSkyLayerProps::RNMBXSkyLayerProps(
    const PropsParserContext &context,
    const RNMBXSkyLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {}))
      {}
RNMBXStyleImportProps::RNMBXStyleImportProps(
    const PropsParserContext &context,
    const RNMBXStyleImportProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {false})),
    config(convertRawProp(context, rawProps, "config", sourceProps.config, {}))
      {}
RNMBXSymbolLayerProps::RNMBXSymbolLayerProps(
    const PropsParserContext &context,
    const RNMBXSymbolLayerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {})),
    aboveLayerID(convertRawProp(context, rawProps, "aboveLayerID", sourceProps.aboveLayerID, {})),
    belowLayerID(convertRawProp(context, rawProps, "belowLayerID", sourceProps.belowLayerID, {})),
    layerIndex(convertRawProp(context, rawProps, "layerIndex", sourceProps.layerIndex, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    sourceLayerID(convertRawProp(context, rawProps, "sourceLayerID", sourceProps.sourceLayerID, {})),
    slot(convertRawProp(context, rawProps, "slot", sourceProps.slot, {})),
    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXTerrainProps::RNMBXTerrainProps(
    const PropsParserContext &context,
    const RNMBXTerrainProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    sourceID(convertRawProp(context, rawProps, "sourceID", sourceProps.sourceID, {})),
    reactStyle(convertRawProp(context, rawProps, "reactStyle", sourceProps.reactStyle, {}))
      {}
RNMBXVectorSourceProps::RNMBXVectorSourceProps(
    const PropsParserContext &context,
    const RNMBXVectorSourceProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    id(convertRawProp(context, rawProps, "id", sourceProps.id, {})),
    existing(convertRawProp(context, rawProps, "existing", sourceProps.existing, {})),
    url(convertRawProp(context, rawProps, "url", sourceProps.url, {})),
    tileUrlTemplates(convertRawProp(context, rawProps, "tileUrlTemplates", sourceProps.tileUrlTemplates, {})),
    attribution(convertRawProp(context, rawProps, "attribution", sourceProps.attribution, {})),
    maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {})),
    minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {})),
    tms(convertRawProp(context, rawProps, "tms", sourceProps.tms, {})),
    hasPressListener(convertRawProp(context, rawProps, "hasPressListener", sourceProps.hasPressListener, {})),
    hitbox(convertRawProp(context, rawProps, "hitbox", sourceProps.hitbox, {}))
      {}
RNMBXViewportProps::RNMBXViewportProps(
    const PropsParserContext &context,
    const RNMBXViewportProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    transitionsToIdleUponUserInteraction(convertRawProp(context, rawProps, "transitionsToIdleUponUserInteraction", sourceProps.transitionsToIdleUponUserInteraction, {})),
    hasStatusChanged(convertRawProp(context, rawProps, "hasStatusChanged", sourceProps.hasStatusChanged, {false}))
      {}

} // namespace facebook::react
