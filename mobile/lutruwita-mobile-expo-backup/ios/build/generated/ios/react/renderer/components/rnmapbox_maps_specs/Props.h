
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

class RNMBXAtmosphereProps final : public ViewProps {
 public:
  RNMBXAtmosphereProps() = default;
  RNMBXAtmosphereProps(const PropsParserContext& context, const RNMBXAtmosphereProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic reactStyle{};
};

class RNMBXBackgroundLayerProps final : public ViewProps {
 public:
  RNMBXBackgroundLayerProps() = default;
  RNMBXBackgroundLayerProps(const PropsParserContext& context, const RNMBXBackgroundLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic reactStyle{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
};

class RNMBXCalloutProps final : public ViewProps {
 public:
  RNMBXCalloutProps() = default;
  RNMBXCalloutProps(const PropsParserContext& context, const RNMBXCalloutProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

class RNMBXCameraProps final : public ViewProps {
 public:
  RNMBXCameraProps() = default;
  RNMBXCameraProps(const PropsParserContext& context, const RNMBXCameraProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic maxBounds{};
  folly::dynamic animationDuration{};
  folly::dynamic animationMode{};
  folly::dynamic defaultStop{};
  folly::dynamic userTrackingMode{};
  folly::dynamic followUserLocation{};
  folly::dynamic followUserMode{};
  folly::dynamic followZoomLevel{};
  folly::dynamic followPitch{};
  folly::dynamic followHeading{};
  folly::dynamic followPadding{};
  folly::dynamic zoomLevel{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic stop{};
};

class RNMBXCircleLayerProps final : public ViewProps {
 public:
  RNMBXCircleLayerProps() = default;
  RNMBXCircleLayerProps(const PropsParserContext& context, const RNMBXCircleLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
  folly::dynamic slot{};
  folly::dynamic id{};
  folly::dynamic reactStyle{};
};

class RNMBXCustomLocationProviderProps final : public ViewProps {
 public:
  RNMBXCustomLocationProviderProps() = default;
  RNMBXCustomLocationProviderProps(const PropsParserContext& context, const RNMBXCustomLocationProviderProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic coordinate{};
  folly::dynamic heading{};
};

class RNMBXFillExtrusionLayerProps final : public ViewProps {
 public:
  RNMBXFillExtrusionLayerProps() = default;
  RNMBXFillExtrusionLayerProps(const PropsParserContext& context, const RNMBXFillExtrusionLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic reactStyle{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
};

class RNMBXFillLayerProps final : public ViewProps {
 public:
  RNMBXFillLayerProps() = default;
  RNMBXFillLayerProps(const PropsParserContext& context, const RNMBXFillLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
  folly::dynamic slot{};
  folly::dynamic id{};
  folly::dynamic reactStyle{};
};

class RNMBXHeatmapLayerProps final : public ViewProps {
 public:
  RNMBXHeatmapLayerProps() = default;
  RNMBXHeatmapLayerProps(const PropsParserContext& context, const RNMBXHeatmapLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
  folly::dynamic slot{};
  folly::dynamic id{};
  folly::dynamic reactStyle{};
};

class RNMBXImageProps final : public ViewProps {
 public:
  RNMBXImageProps() = default;
  RNMBXImageProps(const PropsParserContext& context, const RNMBXImageProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic stretchX{};
  folly::dynamic stretchY{};
  folly::dynamic content{};
  folly::dynamic sdf{};
  folly::dynamic name{};
  folly::dynamic scale{};
};

class RNMBXImagesProps final : public ViewProps {
 public:
  RNMBXImagesProps() = default;
  RNMBXImagesProps(const PropsParserContext& context, const RNMBXImagesProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic images{};
  folly::dynamic nativeImages{};
  folly::dynamic hasOnImageMissing{};
};

class RNMBXImageSourceProps final : public ViewProps {
 public:
  RNMBXImageSourceProps() = default;
  RNMBXImageSourceProps(const PropsParserContext& context, const RNMBXImageSourceProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic existing{};
  folly::dynamic url{};
  folly::dynamic coordinates{};
};

class RNMBXLightProps final : public ViewProps {
 public:
  RNMBXLightProps() = default;
  RNMBXLightProps(const PropsParserContext& context, const RNMBXLightProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic reactStyle{};
};

class RNMBXLineLayerProps final : public ViewProps {
 public:
  RNMBXLineLayerProps() = default;
  RNMBXLineLayerProps(const PropsParserContext& context, const RNMBXLineLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
  folly::dynamic slot{};
  folly::dynamic id{};
  folly::dynamic reactStyle{};
};

class RNMBXMapViewProps final : public ViewProps {
 public:
  RNMBXMapViewProps() = default;
  RNMBXMapViewProps(const PropsParserContext& context, const RNMBXMapViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic attributionEnabled{};
  folly::dynamic attributionPosition{};
  folly::dynamic logoEnabled{};
  folly::dynamic logoPosition{};
  folly::dynamic compassEnabled{};
  folly::dynamic compassFadeWhenNorth{};
  folly::dynamic compassPosition{};
  folly::dynamic compassViewPosition{};
  folly::dynamic compassViewMargins{};
  folly::dynamic scaleBarEnabled{};
  folly::dynamic scaleBarPosition{};
  folly::dynamic zoomEnabled{};
  folly::dynamic scrollEnabled{};
  folly::dynamic rotateEnabled{};
  folly::dynamic pitchEnabled{};
  folly::dynamic deselectAnnotationOnTap{};
  folly::dynamic requestDisallowInterceptTouchEvent{};
  folly::dynamic projection{};
  folly::dynamic localizeLabels{};
  folly::dynamic styleURL{};
  folly::dynamic gestureSettings{};
  folly::dynamic surfaceView{};
  folly::dynamic scaleBarViewMargins{};
  folly::dynamic attributionViewMargins{};
  folly::dynamic attributionViewPosition{};
  folly::dynamic compassImage{};
  folly::dynamic mapViewImpl{};
  folly::dynamic preferredFramesPerSecond{};
};

class RNMBXMarkerViewContentProps final : public ViewProps {
 public:
  RNMBXMarkerViewContentProps() = default;
  RNMBXMarkerViewContentProps(const PropsParserContext& context, const RNMBXMarkerViewContentProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  
};

class RNMBXMarkerViewProps final : public ViewProps {
 public:
  RNMBXMarkerViewProps() = default;
  RNMBXMarkerViewProps(const PropsParserContext& context, const RNMBXMarkerViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic coordinate{};
  folly::dynamic anchor{};
  folly::dynamic allowOverlap{};
  folly::dynamic allowOverlapWithPuck{};
  folly::dynamic isSelected{};
};

class RNMBXModelLayerProps final : public ViewProps {
 public:
  RNMBXModelLayerProps() = default;
  RNMBXModelLayerProps(const PropsParserContext& context, const RNMBXModelLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
  folly::dynamic slot{};
  folly::dynamic id{};
  folly::dynamic reactStyle{};
};

class RNMBXModelsProps final : public ViewProps {
 public:
  RNMBXModelsProps() = default;
  RNMBXModelsProps(const PropsParserContext& context, const RNMBXModelsProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic models{};
};

class RNMBXNativeUserLocationProps final : public ViewProps {
 public:
  RNMBXNativeUserLocationProps() = default;
  RNMBXNativeUserLocationProps(const PropsParserContext& context, const RNMBXNativeUserLocationProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic androidRenderMode{};
  folly::dynamic puckBearing{};
  folly::dynamic puckBearingEnabled{};
  folly::dynamic bearingImage{};
  folly::dynamic shadowImage{};
  folly::dynamic topImage{};
  folly::dynamic scale{};
  bool visible{false};
  folly::dynamic pulsing{};
};

class RNMBXPointAnnotationProps final : public ViewProps {
 public:
  RNMBXPointAnnotationProps() = default;
  RNMBXPointAnnotationProps(const PropsParserContext& context, const RNMBXPointAnnotationProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic coordinate{};
  folly::dynamic draggable{};
  folly::dynamic id{};
  folly::dynamic anchor{};
};

class RNMBXRasterDemSourceProps final : public ViewProps {
 public:
  RNMBXRasterDemSourceProps() = default;
  RNMBXRasterDemSourceProps(const PropsParserContext& context, const RNMBXRasterDemSourceProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic existing{};
  folly::dynamic url{};
  folly::dynamic tileUrlTemplates{};
  folly::dynamic minZoomLevel{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic tileSize{};
};

class RNMBXRasterLayerProps final : public ViewProps {
 public:
  RNMBXRasterLayerProps() = default;
  RNMBXRasterLayerProps(const PropsParserContext& context, const RNMBXRasterLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
  folly::dynamic slot{};
  folly::dynamic id{};
  folly::dynamic reactStyle{};
};

class RNMBXRasterSourceProps final : public ViewProps {
 public:
  RNMBXRasterSourceProps() = default;
  RNMBXRasterSourceProps(const PropsParserContext& context, const RNMBXRasterSourceProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic existing{};
  folly::dynamic url{};
  folly::dynamic tileUrlTemplates{};
  folly::dynamic minZoomLevel{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic tileSize{};
  folly::dynamic tms{};
  folly::dynamic attribution{};
  folly::dynamic sourceBounds{};
};

class RNMBXShapeSourceProps final : public ViewProps {
 public:
  RNMBXShapeSourceProps() = default;
  RNMBXShapeSourceProps(const PropsParserContext& context, const RNMBXShapeSourceProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic existing{};
  folly::dynamic url{};
  folly::dynamic shape{};
  folly::dynamic cluster{};
  folly::dynamic clusterRadius{};
  folly::dynamic clusterMaxZoomLevel{};
  folly::dynamic clusterProperties{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic buffer{};
  folly::dynamic tolerance{};
  folly::dynamic lineMetrics{};
  folly::dynamic hasPressListener{};
  folly::dynamic hitbox{};
};

class RNMBXSkyLayerProps final : public ViewProps {
 public:
  RNMBXSkyLayerProps() = default;
  RNMBXSkyLayerProps(const PropsParserContext& context, const RNMBXSkyLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic reactStyle{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
};

class RNMBXStyleImportProps final : public ViewProps {
 public:
  RNMBXStyleImportProps() = default;
  RNMBXStyleImportProps(const PropsParserContext& context, const RNMBXStyleImportProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string id{};
  bool existing{false};
  folly::dynamic config{};
};

class RNMBXSymbolLayerProps final : public ViewProps {
 public:
  RNMBXSymbolLayerProps() = default;
  RNMBXSymbolLayerProps(const PropsParserContext& context, const RNMBXSymbolLayerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic existing{};
  folly::dynamic filter{};
  folly::dynamic aboveLayerID{};
  folly::dynamic belowLayerID{};
  folly::dynamic layerIndex{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic sourceLayerID{};
  folly::dynamic slot{};
  folly::dynamic id{};
  folly::dynamic reactStyle{};
};

class RNMBXTerrainProps final : public ViewProps {
 public:
  RNMBXTerrainProps() = default;
  RNMBXTerrainProps(const PropsParserContext& context, const RNMBXTerrainProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic sourceID{};
  folly::dynamic reactStyle{};
};

class RNMBXVectorSourceProps final : public ViewProps {
 public:
  RNMBXVectorSourceProps() = default;
  RNMBXVectorSourceProps(const PropsParserContext& context, const RNMBXVectorSourceProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic id{};
  folly::dynamic existing{};
  folly::dynamic url{};
  folly::dynamic tileUrlTemplates{};
  folly::dynamic attribution{};
  folly::dynamic maxZoomLevel{};
  folly::dynamic minZoomLevel{};
  folly::dynamic tms{};
  folly::dynamic hasPressListener{};
  folly::dynamic hitbox{};
};

class RNMBXViewportProps final : public ViewProps {
 public:
  RNMBXViewportProps() = default;
  RNMBXViewportProps(const PropsParserContext& context, const RNMBXViewportProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  folly::dynamic transitionsToIdleUponUserInteraction{};
  bool hasStatusChanged{false};
};

} // namespace facebook::react
