
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/rnmapbox_maps_specs/EventEmitters.h>


namespace facebook::react {




void RNMBXCameraEventEmitter::onUserTrackingModeChange(OnUserTrackingModeChange $event) const {
  dispatchEvent("userTrackingModeChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
{
  auto payloadRenamed = jsi::Object(runtime);
  payloadRenamed.setProperty(runtime, "followUserLocation", $event.payloadRenamed.followUserLocation);
  payloadRenamed.setProperty(runtime, "followUserMode", $event.payloadRenamed.followUserMode);
  $payload.setProperty(runtime, "payloadRenamed", payloadRenamed);
}
    return $payload;
  });
}








void RNMBXImagesEventEmitter::onImageMissing(OnImageMissing $event) const {
  dispatchEvent("imageMissing", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
{
  auto payload = jsi::Object(runtime);
  payload.setProperty(runtime, "imageKey", $event.payload.imageKey);
  $payload.setProperty(runtime, "payload", payload);
}
    return $payload;
  });
}





void RNMBXMapViewEventEmitter::onPress(OnPress $event) const {
  dispatchEvent("press", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXMapViewEventEmitter::onLongPress(OnLongPress $event) const {
  dispatchEvent("longPress", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXMapViewEventEmitter::onMapChange(OnMapChange $event) const {
  dispatchEvent("mapChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXMapViewEventEmitter::onCameraChanged(OnCameraChanged $event) const {
  dispatchEvent("cameraChanged", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}







void RNMBXPointAnnotationEventEmitter::onMapboxPointAnnotationDeselected(OnMapboxPointAnnotationDeselected $event) const {
  dispatchEvent("mapboxPointAnnotationDeselected", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXPointAnnotationEventEmitter::onMapboxPointAnnotationDrag(OnMapboxPointAnnotationDrag $event) const {
  dispatchEvent("mapboxPointAnnotationDrag", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXPointAnnotationEventEmitter::onMapboxPointAnnotationDragEnd(OnMapboxPointAnnotationDragEnd $event) const {
  dispatchEvent("mapboxPointAnnotationDragEnd", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXPointAnnotationEventEmitter::onMapboxPointAnnotationDragStart(OnMapboxPointAnnotationDragStart $event) const {
  dispatchEvent("mapboxPointAnnotationDragStart", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXPointAnnotationEventEmitter::onMapboxPointAnnotationSelected(OnMapboxPointAnnotationSelected $event) const {
  dispatchEvent("mapboxPointAnnotationSelected", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}





void RNMBXShapeSourceEventEmitter::onMapboxShapeSourcePress(OnMapboxShapeSourcePress $event) const {
  dispatchEvent("mapboxShapeSourcePress", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}






void RNMBXVectorSourceEventEmitter::onMapboxVectorSourcePress(OnMapboxVectorSourcePress $event) const {
  dispatchEvent("mapboxVectorSourcePress", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}


void RNMBXViewportEventEmitter::onStatusChanged(OnStatusChanged $event) const {
  dispatchEvent("statusChanged", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "type", $event.type);
$payload.setProperty(runtime, "payload", $event.payload);
    return $payload;
  });
}

} // namespace facebook::react
