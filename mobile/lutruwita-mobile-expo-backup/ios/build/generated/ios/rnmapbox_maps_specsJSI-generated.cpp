/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "rnmapbox_maps_specsJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_takeSnap(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->takeSnap(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asBool()
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_queryTerrainElevation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->queryTerrainElevation(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_setSourceVisibility(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->setSourceVisibility(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asBool(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_getCenter(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->getCenter(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_getCoordinateFromView(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->getCoordinateFromView(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_getPointInView(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->getPointInView(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_getZoom(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->getZoom(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_getVisibleBounds(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->getVisibleBounds(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_queryRenderedFeaturesAtPoint(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->queryRenderedFeaturesAtPoint(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asArray(rt),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_queryRenderedFeaturesInRect(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->queryRenderedFeaturesInRect(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asArray(rt),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_setHandledMapChangedEvents(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->setHandledMapChangedEvents(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_clearData(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->clearData(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}
static jsi::Value __hostFunction_NativeMapViewModuleCxxSpecJSI_querySourceFeatures(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeMapViewModuleCxxSpecJSI *>(&turboModule)->querySourceFeatures(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt).asArray(rt),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asObject(rt).asArray(rt)
  );
}

NativeMapViewModuleCxxSpecJSI::NativeMapViewModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXMapViewModule", jsInvoker) {
  methodMap_["takeSnap"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleCxxSpecJSI_takeSnap};
  methodMap_["queryTerrainElevation"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleCxxSpecJSI_queryTerrainElevation};
  methodMap_["setSourceVisibility"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleCxxSpecJSI_setSourceVisibility};
  methodMap_["getCenter"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleCxxSpecJSI_getCenter};
  methodMap_["getCoordinateFromView"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleCxxSpecJSI_getCoordinateFromView};
  methodMap_["getPointInView"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleCxxSpecJSI_getPointInView};
  methodMap_["getZoom"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleCxxSpecJSI_getZoom};
  methodMap_["getVisibleBounds"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleCxxSpecJSI_getVisibleBounds};
  methodMap_["queryRenderedFeaturesAtPoint"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleCxxSpecJSI_queryRenderedFeaturesAtPoint};
  methodMap_["queryRenderedFeaturesInRect"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleCxxSpecJSI_queryRenderedFeaturesInRect};
  methodMap_["setHandledMapChangedEvents"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleCxxSpecJSI_setHandledMapChangedEvents};
  methodMap_["clearData"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleCxxSpecJSI_clearData};
  methodMap_["querySourceFeatures"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleCxxSpecJSI_querySourceFeatures};
}
static jsi::Value __hostFunction_NativeRNMBXCameraModuleCxxSpecJSI_updateCameraStop(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXCameraModuleCxxSpecJSI *>(&turboModule)->updateCameraStop(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt)
  );
}

NativeRNMBXCameraModuleCxxSpecJSI::NativeRNMBXCameraModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXCameraModule", jsInvoker) {
  methodMap_["updateCameraStop"] = MethodMetadata {2, __hostFunction_NativeRNMBXCameraModuleCxxSpecJSI_updateCameraStop};
}
static jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_create(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI *>(&turboModule)->create(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_setLineString(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI *>(&turboModule)->setLineString(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_setStartOffset(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI *>(&turboModule)->setStartOffset(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_setEndOffset(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI *>(&turboModule)->setEndOffset(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}

NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI::NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXChangeLineOffsetsShapeAnimatorModule", jsInvoker) {
  methodMap_["create"] = MethodMetadata {4, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_create};
  methodMap_["setLineString"] = MethodMetadata {4, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_setLineString};
  methodMap_["setStartOffset"] = MethodMetadata {3, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_setStartOffset};
  methodMap_["setEndOffset"] = MethodMetadata {3, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleCxxSpecJSI_setEndOffset};
}
static jsi::Value __hostFunction_NativeRNMBXImageModuleCxxSpecJSI_refresh(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXImageModuleCxxSpecJSI *>(&turboModule)->refresh(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}

NativeRNMBXImageModuleCxxSpecJSI::NativeRNMBXImageModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXImageModule", jsInvoker) {
  methodMap_["refresh"] = MethodMetadata {1, __hostFunction_NativeRNMBXImageModuleCxxSpecJSI_refresh};
}
static jsi::Value __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_start(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRNMBXLocationModuleCxxSpecJSI *>(&turboModule)->start(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_stop(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRNMBXLocationModuleCxxSpecJSI *>(&turboModule)->stop(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_setRequestsAlwaysUse(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRNMBXLocationModuleCxxSpecJSI *>(&turboModule)->setRequestsAlwaysUse(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_setMinDisplacement(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRNMBXLocationModuleCxxSpecJSI *>(&turboModule)->setMinDisplacement(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_getLastKnownLocation(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXLocationModuleCxxSpecJSI *>(&turboModule)->getLastKnownLocation(
    rt
  );
}
static jsi::Value __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_simulateHeading(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRNMBXLocationModuleCxxSpecJSI *>(&turboModule)->simulateHeading(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_setLocationEventThrottle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRNMBXLocationModuleCxxSpecJSI *>(&turboModule)->setLocationEventThrottle(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}

NativeRNMBXLocationModuleCxxSpecJSI::NativeRNMBXLocationModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXLocationModule", jsInvoker) {
  methodMap_["start"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_start};
  methodMap_["stop"] = MethodMetadata {0, __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_stop};
  methodMap_["setRequestsAlwaysUse"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_setRequestsAlwaysUse};
  methodMap_["setMinDisplacement"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_setMinDisplacement};
  methodMap_["getLastKnownLocation"] = MethodMetadata {0, __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_getLastKnownLocation};
  methodMap_["simulateHeading"] = MethodMetadata {2, __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_simulateHeading};
  methodMap_["setLocationEventThrottle"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleCxxSpecJSI_setLocationEventThrottle};
}
static jsi::Value __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI_create(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI *>(&turboModule)->create(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt)
  );
}
static jsi::Value __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI_moveTo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI *>(&turboModule)->moveTo(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt).asArray(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}

NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI::NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXMovePointShapeAnimatorModule", jsInvoker) {
  methodMap_["create"] = MethodMetadata {2, __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI_create};
  methodMap_["moveTo"] = MethodMetadata {3, __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleCxxSpecJSI_moveTo};
}
static jsi::Value __hostFunction_NativeRNMBXPointAnnotationModuleCxxSpecJSI_refresh(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXPointAnnotationModuleCxxSpecJSI *>(&turboModule)->refresh(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}

NativeRNMBXPointAnnotationModuleCxxSpecJSI::NativeRNMBXPointAnnotationModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXPointAnnotationModule", jsInvoker) {
  methodMap_["refresh"] = MethodMetadata {1, __hostFunction_NativeRNMBXPointAnnotationModuleCxxSpecJSI_refresh};
}
static jsi::Value __hostFunction_NativeRNMBXShapeSourceModuleCxxSpecJSI_getClusterExpansionZoom(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXShapeSourceModuleCxxSpecJSI *>(&turboModule)->getClusterExpansionZoom(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeRNMBXShapeSourceModuleCxxSpecJSI_getClusterLeaves(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXShapeSourceModuleCxxSpecJSI *>(&turboModule)->getClusterLeaves(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRNMBXShapeSourceModuleCxxSpecJSI_getClusterChildren(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXShapeSourceModuleCxxSpecJSI *>(&turboModule)->getClusterChildren(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}

NativeRNMBXShapeSourceModuleCxxSpecJSI::NativeRNMBXShapeSourceModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXShapeSourceModule", jsInvoker) {
  methodMap_["getClusterExpansionZoom"] = MethodMetadata {2, __hostFunction_NativeRNMBXShapeSourceModuleCxxSpecJSI_getClusterExpansionZoom};
  methodMap_["getClusterLeaves"] = MethodMetadata {4, __hostFunction_NativeRNMBXShapeSourceModuleCxxSpecJSI_getClusterLeaves};
  methodMap_["getClusterChildren"] = MethodMetadata {2, __hostFunction_NativeRNMBXShapeSourceModuleCxxSpecJSI_getClusterChildren};
}
static jsi::Value __hostFunction_NativeRNMBXTileStoreModuleCxxSpecJSI_shared(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXTileStoreModuleCxxSpecJSI *>(&turboModule)->shared(
    rt,
    count <= 0 || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asString(rt))
  );
}
static jsi::Value __hostFunction_NativeRNMBXTileStoreModuleCxxSpecJSI_setOption(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXTileStoreModuleCxxSpecJSI *>(&turboModule)->setOption(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber(),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asString(rt),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asObject(rt)
  );
}

NativeRNMBXTileStoreModuleCxxSpecJSI::NativeRNMBXTileStoreModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXTileStoreModule", jsInvoker) {
  methodMap_["shared"] = MethodMetadata {1, __hostFunction_NativeRNMBXTileStoreModuleCxxSpecJSI_shared};
  methodMap_["setOption"] = MethodMetadata {4, __hostFunction_NativeRNMBXTileStoreModuleCxxSpecJSI_setOption};
}
static jsi::Value __hostFunction_NativeRNMBXViewportModuleCxxSpecJSI_getState(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXViewportModuleCxxSpecJSI *>(&turboModule)->getState(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}
static jsi::Value __hostFunction_NativeRNMBXViewportModuleCxxSpecJSI_transitionTo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXViewportModuleCxxSpecJSI *>(&turboModule)->transitionTo(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber()),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeRNMBXViewportModuleCxxSpecJSI_idle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRNMBXViewportModuleCxxSpecJSI *>(&turboModule)->idle(
    rt,
    count <= 0 || args[0].isNull() || args[0].isUndefined() ? std::nullopt : std::make_optional(args[0].asNumber())
  );
}

NativeRNMBXViewportModuleCxxSpecJSI::NativeRNMBXViewportModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RNMBXViewportModule", jsInvoker) {
  methodMap_["getState"] = MethodMetadata {1, __hostFunction_NativeRNMBXViewportModuleCxxSpecJSI_getState};
  methodMap_["transitionTo"] = MethodMetadata {3, __hostFunction_NativeRNMBXViewportModuleCxxSpecJSI_transitionTo};
  methodMap_["idle"] = MethodMetadata {1, __hostFunction_NativeRNMBXViewportModuleCxxSpecJSI_idle};
}


} // namespace facebook::react
