/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "rnmapbox_maps_specs.h"


@implementation NativeMapViewModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_takeSnap(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "takeSnap", @selector(takeSnap:writeToDisk:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_queryTerrainElevation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "queryTerrainElevation", @selector(queryTerrainElevation:coordinates:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_setSourceVisibility(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setSourceVisibility", @selector(setSourceVisibility:visible:sourceId:sourceLayerId:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_getCenter(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getCenter", @selector(getCenter:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_getCoordinateFromView(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getCoordinateFromView", @selector(getCoordinateFromView:atPoint:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_getPointInView(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getPointInView", @selector(getPointInView:atCoordinate:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_getZoom(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getZoom", @selector(getZoom:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_getVisibleBounds(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getVisibleBounds", @selector(getVisibleBounds:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_queryRenderedFeaturesAtPoint(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "queryRenderedFeaturesAtPoint", @selector(queryRenderedFeaturesAtPoint:atPoint:withFilter:withLayerIDs:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_queryRenderedFeaturesInRect(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "queryRenderedFeaturesInRect", @selector(queryRenderedFeaturesInRect:withBBox:withFilter:withLayerIDs:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_setHandledMapChangedEvents(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setHandledMapChangedEvents", @selector(setHandledMapChangedEvents:events:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_clearData(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "clearData", @selector(clearData:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeMapViewModuleSpecJSI_querySourceFeatures(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "querySourceFeatures", @selector(querySourceFeatures:sourceId:withFilter:withSourceLayerIDs:resolve:reject:), args, count);
    }

  NativeMapViewModuleSpecJSI::NativeMapViewModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["takeSnap"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleSpecJSI_takeSnap};
        
        
        methodMap_["queryTerrainElevation"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleSpecJSI_queryTerrainElevation};
        
        
        methodMap_["setSourceVisibility"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleSpecJSI_setSourceVisibility};
        
        
        methodMap_["getCenter"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleSpecJSI_getCenter};
        
        
        methodMap_["getCoordinateFromView"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleSpecJSI_getCoordinateFromView};
        
        
        methodMap_["getPointInView"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleSpecJSI_getPointInView};
        
        
        methodMap_["getZoom"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleSpecJSI_getZoom};
        
        
        methodMap_["getVisibleBounds"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleSpecJSI_getVisibleBounds};
        
        
        methodMap_["queryRenderedFeaturesAtPoint"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleSpecJSI_queryRenderedFeaturesAtPoint};
        
        
        methodMap_["queryRenderedFeaturesInRect"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleSpecJSI_queryRenderedFeaturesInRect};
        
        
        methodMap_["setHandledMapChangedEvents"] = MethodMetadata {2, __hostFunction_NativeMapViewModuleSpecJSI_setHandledMapChangedEvents};
        
        
        methodMap_["clearData"] = MethodMetadata {1, __hostFunction_NativeMapViewModuleSpecJSI_clearData};
        
        
        methodMap_["querySourceFeatures"] = MethodMetadata {4, __hostFunction_NativeMapViewModuleSpecJSI_querySourceFeatures};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXCameraModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXCameraModuleSpecJSI_updateCameraStop(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "updateCameraStop", @selector(updateCameraStop:stop:resolve:reject:), args, count);
    }

  NativeRNMBXCameraModuleSpecJSI::NativeRNMBXCameraModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["updateCameraStop"] = MethodMetadata {2, __hostFunction_NativeRNMBXCameraModuleSpecJSI_updateCameraStop};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_create(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "create", @selector(create:coordinates:startOffset:endOffset:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_setLineString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setLineString", @selector(setLineString:coordinates:startOffset:endOffset:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_setStartOffset(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setStartOffset", @selector(setStartOffset:offset:duration:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_setEndOffset(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setEndOffset", @selector(setEndOffset:offset:duration:resolve:reject:), args, count);
    }

  NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI::NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["create"] = MethodMetadata {4, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_create};
        
        
        methodMap_["setLineString"] = MethodMetadata {4, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_setLineString};
        
        
        methodMap_["setStartOffset"] = MethodMetadata {3, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_setStartOffset};
        
        
        methodMap_["setEndOffset"] = MethodMetadata {3, __hostFunction_NativeRNMBXChangeLineOffsetsShapeAnimatorModuleSpecJSI_setEndOffset};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXImageModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXImageModuleSpecJSI_refresh(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "refresh", @selector(refresh:resolve:reject:), args, count);
    }

  NativeRNMBXImageModuleSpecJSI::NativeRNMBXImageModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["refresh"] = MethodMetadata {1, __hostFunction_NativeRNMBXImageModuleSpecJSI_refresh};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXLocationModuleSpecBase
- (void)emitOnLocationUpdate:(NSDictionary *)value
{
  _eventEmitterCallback("onLocationUpdate", value);
}

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXLocationModuleSpecJSI_start(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "start", @selector(start:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXLocationModuleSpecJSI_stop(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "stop", @selector(stop), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXLocationModuleSpecJSI_setRequestsAlwaysUse(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setRequestsAlwaysUse", @selector(setRequestsAlwaysUse:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXLocationModuleSpecJSI_setMinDisplacement(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setMinDisplacement", @selector(setMinDisplacement:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXLocationModuleSpecJSI_getLastKnownLocation(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getLastKnownLocation", @selector(getLastKnownLocation:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXLocationModuleSpecJSI_simulateHeading(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "simulateHeading", @selector(simulateHeading:increment:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXLocationModuleSpecJSI_setLocationEventThrottle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setLocationEventThrottle", @selector(setLocationEventThrottle:), args, count);
    }

  NativeRNMBXLocationModuleSpecJSI::NativeRNMBXLocationModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["start"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleSpecJSI_start};
        
        
        methodMap_["stop"] = MethodMetadata {0, __hostFunction_NativeRNMBXLocationModuleSpecJSI_stop};
        
        
        methodMap_["setRequestsAlwaysUse"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleSpecJSI_setRequestsAlwaysUse};
        
        
        methodMap_["setMinDisplacement"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleSpecJSI_setMinDisplacement};
        
        
        methodMap_["getLastKnownLocation"] = MethodMetadata {0, __hostFunction_NativeRNMBXLocationModuleSpecJSI_getLastKnownLocation};
        
        
        methodMap_["simulateHeading"] = MethodMetadata {2, __hostFunction_NativeRNMBXLocationModuleSpecJSI_simulateHeading};
        
        
        methodMap_["setLocationEventThrottle"] = MethodMetadata {1, __hostFunction_NativeRNMBXLocationModuleSpecJSI_setLocationEventThrottle};
        
        eventEmitterMap_["onLocationUpdate"] = std::make_shared<AsyncEventEmitter<id>>();
        setEventEmitterCallback([&](const std::string &name, id value) {
          static_cast<AsyncEventEmitter<id> &>(*eventEmitterMap_[name]).emit(value);
        });
  }
} // namespace facebook::react

@implementation NativeRNMBXMovePointShapeAnimatorModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleSpecJSI_create(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "create", @selector(create:coordinate:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleSpecJSI_moveTo(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "moveTo", @selector(moveTo:coordinate:duration:resolve:reject:), args, count);
    }

  NativeRNMBXMovePointShapeAnimatorModuleSpecJSI::NativeRNMBXMovePointShapeAnimatorModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["create"] = MethodMetadata {2, __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleSpecJSI_create};
        
        
        methodMap_["moveTo"] = MethodMetadata {3, __hostFunction_NativeRNMBXMovePointShapeAnimatorModuleSpecJSI_moveTo};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXPointAnnotationModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXPointAnnotationModuleSpecJSI_refresh(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "refresh", @selector(refresh:resolve:reject:), args, count);
    }

  NativeRNMBXPointAnnotationModuleSpecJSI::NativeRNMBXPointAnnotationModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["refresh"] = MethodMetadata {1, __hostFunction_NativeRNMBXPointAnnotationModuleSpecJSI_refresh};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXShapeSourceModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXShapeSourceModuleSpecJSI_getClusterExpansionZoom(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getClusterExpansionZoom", @selector(getClusterExpansionZoom:featureJSON:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXShapeSourceModuleSpecJSI_getClusterLeaves(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getClusterLeaves", @selector(getClusterLeaves:featureJSON:number:offset:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXShapeSourceModuleSpecJSI_getClusterChildren(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getClusterChildren", @selector(getClusterChildren:featureJSON:resolve:reject:), args, count);
    }

  NativeRNMBXShapeSourceModuleSpecJSI::NativeRNMBXShapeSourceModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["getClusterExpansionZoom"] = MethodMetadata {2, __hostFunction_NativeRNMBXShapeSourceModuleSpecJSI_getClusterExpansionZoom};
        
        
        methodMap_["getClusterLeaves"] = MethodMetadata {4, __hostFunction_NativeRNMBXShapeSourceModuleSpecJSI_getClusterLeaves};
        
        
        methodMap_["getClusterChildren"] = MethodMetadata {2, __hostFunction_NativeRNMBXShapeSourceModuleSpecJSI_getClusterChildren};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXTileStoreModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXTileStoreModuleSpecJSI_shared(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "shared", @selector(shared:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXTileStoreModuleSpecJSI_setOption(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setOption", @selector(setOption:key:domain:value:resolve:reject:), args, count);
    }

  NativeRNMBXTileStoreModuleSpecJSI::NativeRNMBXTileStoreModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["shared"] = MethodMetadata {1, __hostFunction_NativeRNMBXTileStoreModuleSpecJSI_shared};
        
        
        methodMap_["setOption"] = MethodMetadata {4, __hostFunction_NativeRNMBXTileStoreModuleSpecJSI_setOption};
        
  }
} // namespace facebook::react

@implementation NativeRNMBXViewportModuleSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRNMBXViewportModuleSpecJSI_getState(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getState", @selector(getState:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXViewportModuleSpecJSI_transitionTo(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "transitionTo", @selector(transitionTo:state:transition:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRNMBXViewportModuleSpecJSI_idle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "idle", @selector(idle:resolve:reject:), args, count);
    }

  NativeRNMBXViewportModuleSpecJSI::NativeRNMBXViewportModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["getState"] = MethodMetadata {1, __hostFunction_NativeRNMBXViewportModuleSpecJSI_getState};
        
        
        methodMap_["transitionTo"] = MethodMetadata {3, __hostFunction_NativeRNMBXViewportModuleSpecJSI_transitionTo};
        
        
        methodMap_["idle"] = MethodMetadata {1, __hostFunction_NativeRNMBXViewportModuleSpecJSI_idle};
        
  }
} // namespace facebook::react
